{"version":3,"sources":["components/User/User.tsx","components/SideBar.tsx","api/api.ts","redux/buyersReducer.ts","components/Table/Table.tsx","components/Buyers/Buyers.tsx","redux/terminalsReducer.ts","components/Terminals/Terminals.tsx","components/Error/Error.tsx","components/Login/LoginForm.tsx","redux/buyerReducer.ts","components/Buyers/Buyer/Buyer.tsx","App.tsx","serviceWorker.ts","redux/store.ts","index.tsx"],"names":["User","props","className","alt","src","avatar_url","login","UserData","userData","map","u","SideBar","React","isAuth","to","console","log","instanse","axios","create","baseURL","buyersApi","page","pageSize","sortFields","order","get","then","res","id","terminalsApi","title","description","post","data","delete","initialState","buyers","currentPage","totalCount","getBuyersAC","type","Table","useSelector","state","useState","search","setSearch","buyersArr","setBuyersArr","useEffect","filter","b","buyerName","toLowerCase","includes","placeholder","onChange","e","target","value","hiddenIconFlagAverageCheck","onClick","setAverageCheckAsc","setAverageCheckDesc","hiddenIconFlagNumberOfPurchases","setNumberOfPurchasesAsc","setNumberOfPurchasesDesc","hiddenIconFlagTotalRevenues","setTotalRevenuesAsc","setTotalRevenuesDesc","buyer","key","averageCheck","numberOfPurchases","totalRevenues","Buyers","dispatch","useDispatch","setHiddenIconFlagTotalRevenues","setHiddenIconFlagNumberOfPurchases","setHiddenIconFlagAverageCheck","length","getBuyers","changeData","setSortFieldsAC","setOrderAC","name","setPageSizeAC","changePageSize","selected","totalItemsCount","activePage","itemsCountPerPage","Terminals","setTitle","setDescription","terminals","remTerminal","removeTerminalAC","removeTerminal","event","required","newTerminal","addTerminalAC","addNewTerminal","t","Error","LoginForm","userName","setUserName","password","setPassword","userNameError","setUserNameError","passwordError","setPasswordError","validate","Digit","test","Upper","onSubmit","preventDefault","setIsAuth","catch","response","status","message","Buyer","useParams","a","getBuyer","App","setUserData","authUser","userInfo","concat","exact","path","render","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","c","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.3415cfea.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport '../../scss/sidebar.scss';\r\n\r\ntype propsType = {\r\n    avatar_url: any\r\n    login: string\r\n}\r\nexport const User = (props: propsType) => {\r\n    return (\r\n        <div className='avatar'>\r\n            <img alt=\"avatar\" src={props.avatar_url}/>\r\n            <div>\r\n                <div>{props.login}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const UserData = (props: any) => <div>{props.userData.map((u: any) => <User {...u} />)}</div>\r\n\r\n","import * as React from 'react';\r\nimport '../scss/sidebar.scss';\r\nimport {UserData} from \"./User/User\";\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ntype propsType = {\r\n    userData: any\r\n    isAuth: boolean\r\n}\r\n\r\nexport const SideBar = React.memo((props: propsType) => {\r\n    return (\r\n        <div className='side-bar'>\r\n            {props.isAuth ?\r\n                <UserData userData={props.userData}/>\r\n                : <div></div>\r\n            }\r\n            <div className='links'>\r\n                <NavLink to={'/terminals'}>\r\n                    Terminals\r\n                </NavLink>\r\n                <NavLink to={'/buyers'}>Buyers</NavLink>\r\n            </div >\r\n            {console.log('render')}\r\n            <div  className='text'>Copyright © 2020</div>\r\n        </div>\r\n    );\r\n});\r\n","import axios from 'axios';\r\nimport {buyerType} from \"../redux/buyersReducer\";\r\nimport {terminalType} from \"../redux/terminalsReducer\";\r\n\r\nconst instanse = axios.create({\r\n    baseURL: 'https://json-server-invoice.herokuapp.com'\r\n    // baseURL: 'http://localhost:3004'\r\n});\r\ntype CommonApiType<T> = {\r\n    items: terminalType\r\n    data: T\r\n}\r\nexport type GetBuyerListApiType = Array<buyerType>\r\nexport type GetTerminalsListApiType = Array<terminalType>\r\n\r\nexport const buyersApi = {\r\n\r\n    getBuyers(page: number, pageSize: number, sortFields: string, order: string) {\r\n        return instanse.get<GetBuyerListApiType>(`/buyers?_page=${page}&_limit=${pageSize}&_order=${order}&_sort=${sortFields}` ).then(res => res)\r\n    },\r\n    getBuyer(id: string) {\r\n        return instanse.get<buyerType>(`/buyers/${id}`).then(res => res)\r\n    },\r\n}\r\nexport const terminalsApi = {\r\n    getTerminals() {\r\n        return instanse.get<GetTerminalsListApiType>('/terminals').then(res => res)\r\n    },\r\n    addTerminal(title: string, description: string ) {\r\n        return instanse.post<CommonApiType<{terminal: terminalType}>>('/terminals', {title: title, description: description}).then(res => res.data)\r\n    },\r\n    deleteTerminal(id:string) {\r\n        return instanse.delete<CommonApiType<{}>>(`/terminals/${id}`).then(res => res)\r\n    },\r\n\r\n}\r\n\r\n\r\n\r\n","import {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from './store';\r\nimport {buyersApi} from \"../api/api\";\r\n\r\nexport type buyerType = {\r\n    id: string,\r\n    buyerName: string,\r\n    averageCheck: number,\r\n    numberOfPurchases: number,\r\n    totalRevenues: number\r\n}\r\n\r\nexport type getBuyersAction = {\r\n    type: 'BUYERS_REDUCER/GET_BUYERS',\r\n    buyers: Array<buyerType>\r\n}\r\nexport type setPageSizeAction = {\r\n    type: 'BUYERS_REDUCER/SET_PAGE_SIZE',\r\n    pageSize: number\r\n}\r\nexport type setPageAction = {\r\n    type: 'BUYERS_REDUCER/SET_PAGE',\r\n    page: number\r\n}\r\nexport type setOrderAction = {\r\n    type: 'BUYERS_REDUCER/SET_ORDER',\r\n    order: string\r\n}\r\nexport type setSortFieldsAction = {\r\n    type: 'BUYERS_REDUCER/SET_SORT_FIELDS',\r\n    sortFields: string\r\n}\r\ntype InitialStateType = {\r\n    buyers: Array<buyerType>,\r\n    currentPage: number,\r\n    pageSize: number,\r\n    totalCount: number,\r\n    order: string,\r\n    sortFields: string\r\n}\r\nconst initialState: InitialStateType = {\r\n    buyers: [],\r\n    currentPage: 0,\r\n    pageSize: 5,\r\n    totalCount: 15,\r\n    order: 'asc',\r\n    sortFields: 'id'\r\n};\r\n\r\ntype ActionsType = getBuyersAction | setPageAction | setPageSizeAction | setOrderAction | setSortFieldsAction\r\n\r\n\r\nexport const buyersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'BUYERS_REDUCER/GET_BUYERS':\r\n            return {\r\n                ...state,\r\n                buyers: action.buyers\r\n            }\r\n        case 'BUYERS_REDUCER/SET_PAGE':\r\n            return {\r\n                ...state,\r\n                currentPage: action.page\r\n            }\r\n        case 'BUYERS_REDUCER/SET_PAGE_SIZE':\r\n            return {\r\n                ...state,\r\n                pageSize: action.pageSize\r\n            }\r\n        case 'BUYERS_REDUCER/SET_ORDER':\r\n            return {\r\n                ...state,\r\n                order: action.order\r\n            }\r\n        case 'BUYERS_REDUCER/SET_SORT_FIELDS':\r\n            return {\r\n                ...state,\r\n                sortFields: action.sortFields\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const getBuyersAC = (buyers: Array<buyerType>): getBuyersAction => {\r\n    return {type: 'BUYERS_REDUCER/GET_BUYERS', buyers}\r\n}\r\nexport const setPageAC = (page: number): setPageAction => {\r\n    return {type: 'BUYERS_REDUCER/SET_PAGE', page}\r\n}\r\nexport const setPageSizeAC = (pageSize: number): setPageSizeAction => {\r\n    return {type: 'BUYERS_REDUCER/SET_PAGE_SIZE', pageSize}\r\n}\r\nexport const setOrderAC = (order: string): setOrderAction => {\r\n    return {type: 'BUYERS_REDUCER/SET_ORDER', order}\r\n}\r\nexport const setSortFieldsAC = (sortFields: string): setSortFieldsAction => {\r\n    return {type: 'BUYERS_REDUCER/SET_SORT_FIELDS', sortFields}\r\n}\r\n\r\nexport type ThunkDispatchType = ThunkDispatch<AppRootStateType, {}, ActionsType>\r\n\r\nexport const getBuyers = (page: number, pageSize: number, sortFields: string, order: string) => (dispatch: ThunkDispatchType) => {\r\n    buyersApi.getBuyers(page, pageSize, sortFields, order)\r\n        .then(res => {\r\n            dispatch(getBuyersAC(res.data))\r\n        });\r\n}\r\n","import React, {useEffect, useState} from 'react';\r\nimport '../../scss/table.scss';\r\nimport {buyerType} from '../../redux/buyersReducer';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/store\";\r\n\r\ntype propsType = {\r\n    setAverageCheckDesc: (sortFields: string, order: string) => void\r\n    setNumberOfPurchasesDesc: (sortFields: string, order: string) => void\r\n    setTotalRevenuesDesc: (sortFields: string, order: string) => void\r\n    setAverageCheckAsc: (sortFields: string, order: string) => void\r\n    setNumberOfPurchasesAsc: (sortFields: string, order: string) => void\r\n    setTotalRevenuesAsc: (sortFields: string, order: string) => void\r\n    hiddenIconFlagAverageCheck: boolean\r\n    hiddenIconFlagTotalRevenues: boolean\r\n    hiddenIconFlagNumberOfPurchases: boolean\r\n}\r\n\r\nexport const Table = (props: propsType) => {\r\n\r\n    const buyers = useSelector<AppRootStateType, Array<buyerType>>(state => state.buyers.buyers)\r\n    const [search, setSearch] = useState(\"\");\r\n    const [buyersArr, setBuyersArr] = useState(buyers);\r\n\r\n    useEffect(() => {\r\n        setBuyersArr(buyers.filter(b =>\r\n            b.buyerName.toLowerCase().includes(search.toLowerCase())\r\n        ))\r\n    }, [buyers, search]);\r\n\r\n    return (\r\n        <div className=\"buyers\">\r\n            <div className='titleWrap'>\r\n                <div className='title'>BUYERS</div>\r\n                <input className='search'\r\n                       type=\"text\"\r\n                       placeholder=\"Search buyer by name...\"\r\n                       onChange={e => setSearch(e.target.value)}\r\n                /></div>\r\n            <div className='tableWrap'>\r\n                <table className=\"table\" id='table'>\r\n                    <tr>\r\n                        <th>Buyer ID</th>\r\n                        <th>Name</th>\r\n                        <th className=\"col\">Average check\r\n                            {!props.hiddenIconFlagAverageCheck ?\r\n                                <span id={'max'} className=\"material-icons\"\r\n                                      onClick={() => props.setAverageCheckDesc('averageCheck', 'desc')}>filter_list</span>\r\n                                : <span id={'min'} className=\"material-icons\"\r\n                                        onClick={() => props.setAverageCheckAsc('averageCheck', 'asc')}>filter_list</span>}\r\n                        </th>\r\n                        <th className=\"col\">Buying\r\n                            {!props.hiddenIconFlagNumberOfPurchases ?\r\n                                <span id={'max'} className=\"material-icons\"\r\n                                      onClick={() => props.setNumberOfPurchasesDesc('numberOfPurchases', 'desc')}>filter_list</span>\r\n                                : <span id={'min'} className=\"material-icons\"\r\n                                        onClick={() => props.setNumberOfPurchasesAsc('numberOfPurchases', 'asc')}>filter_list</span>}\r\n                        </th>\r\n                        <th className=\"col\">Total revenue\r\n                            {!props.hiddenIconFlagTotalRevenues ?\r\n                                <span id={'max'} className=\"material-icons\"\r\n                                      onClick={() => props.setTotalRevenuesDesc('totalRevenues', 'desc')}>filter_list</span>\r\n                                : <span id={'min'} className=\"material-icons\"\r\n                                        onClick={() => props.setTotalRevenuesAsc('totalRevenues', 'asc')}>filter_list</span>}\r\n                        </th>\r\n                    </tr>\r\n\r\n                    {\r\n                        buyersArr.map(buyer =>\r\n                            <tr key={buyer.id}>\r\n                                <td><NavLink to={`/buyers/${buyer.id}`}>{buyer.id}</NavLink></td>\r\n                                <td>{buyer.buyerName}</td>\r\n                                <td>{buyer.averageCheck} </td>\r\n                                <td>{buyer.numberOfPurchases}</td>\r\n                                <td>{buyer.totalRevenues}</td>\r\n                            </tr>\r\n                        )}\r\n                </table>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {useEffect, useState} from 'react';\r\nimport '../../scss/buyers.scss';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../redux/store';\r\nimport {getBuyers, getBuyersAC, setOrderAC, setPageAC, setPageSizeAC, setSortFieldsAC} from '../../redux/buyersReducer';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport Pagination from \"react-js-pagination\";\r\nimport {Table} from '../Table/Table';\r\n\r\ntype propsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nexport const Buyers = ({isAuth}: propsType) => {\r\n    const {buyers, totalCount, currentPage, pageSize, order, sortFields} = useSelector(({buyers}: AppRootStateType) => buyers)\r\n\r\n    const dispatch = useDispatch();\r\n    const [hiddenIconFlagTotalRevenues, setHiddenIconFlagTotalRevenues] = useState(false);\r\n    const [hiddenIconFlagNumberOfPurchases, setHiddenIconFlagNumberOfPurchases] = useState(false);\r\n    const [hiddenIconFlagAverageCheck, setHiddenIconFlagAverageCheck] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (buyers.length === 0) {\r\n            dispatch(getBuyers(currentPage, pageSize, sortFields, order))\r\n        }\r\n    }, [dispatch, buyers, currentPage, order, pageSize, sortFields]);\r\n\r\n    if (!isAuth) {\r\n        return <Redirect to='/'/>\r\n    }\r\n    const handlePageChange = (currentPage: number) => {\r\n        dispatch(getBuyersAC([]))\r\n        dispatch(setPageAC(currentPage))\r\n    }\r\n    const changePageSize = (pageSize: number) => {\r\n        dispatch(getBuyersAC([]))\r\n        dispatch(setPageSizeAC(pageSize))\r\n    }\r\n    const changeData = (sortFields: string, order: string) => {\r\n        dispatch(getBuyersAC([]))\r\n        dispatch(setSortFieldsAC(sortFields))\r\n        dispatch(setOrderAC(order))\r\n\r\n    }\r\n    const setAverageCheckDesc = (sortFields: string, order: string) => {\r\n        changeData(sortFields, order)\r\n        setHiddenIconFlagAverageCheck(!hiddenIconFlagAverageCheck)\r\n    };\r\n\r\n    const setNumberOfPurchasesDesc = (sortFields: string, order: string) => {\r\n        changeData(sortFields, order)\r\n        setHiddenIconFlagNumberOfPurchases(!hiddenIconFlagNumberOfPurchases)\r\n    };\r\n\r\n    const setTotalRevenuesDesc = (sortFields: string, order: string) => {\r\n        changeData(sortFields, order)\r\n        setHiddenIconFlagTotalRevenues(!hiddenIconFlagTotalRevenues)\r\n    };\r\n    const setAverageCheckAsc= (sortFields: string, order: string) => {\r\n        changeData(sortFields, order)\r\n        setHiddenIconFlagAverageCheck(!hiddenIconFlagAverageCheck)\r\n    };\r\n\r\n    const setNumberOfPurchasesAsc = (sortFields: string, order: string) => {\r\n        changeData(sortFields, order)\r\n        setHiddenIconFlagNumberOfPurchases(!hiddenIconFlagNumberOfPurchases)\r\n\r\n    };\r\n\r\n    const setTotalRevenuesAsc = (sortFields: string, order: string) => {\r\n        changeData(sortFields, order)\r\n        setHiddenIconFlagTotalRevenues(!hiddenIconFlagTotalRevenues)\r\n\r\n    };\r\n\r\n    return (\r\n        <div className=\"buyers\">\r\n            <div className='setting'><span>Choose page size: </span>\r\n                <select name=\"mode\" id=\"mode\" onChange={(e) => changePageSize(+e.target.value)}>\r\n                    <option value={5} selected>5</option>\r\n                    <option value={10}>10</option>\r\n                    <option value={15}>15</option>\r\n                </select></div>\r\n            <Table\r\n                setAverageCheckDesc={setAverageCheckDesc}\r\n                setNumberOfPurchasesDesc={setNumberOfPurchasesDesc}\r\n                setTotalRevenuesDesc={setTotalRevenuesDesc}\r\n                setAverageCheckAsc={setAverageCheckAsc}\r\n                setNumberOfPurchasesAsc={setNumberOfPurchasesAsc}\r\n                setTotalRevenuesAsc={setTotalRevenuesAsc}\r\n                hiddenIconFlagAverageCheck={hiddenIconFlagAverageCheck}\r\n                hiddenIconFlagNumberOfPurchases={hiddenIconFlagNumberOfPurchases}\r\n                hiddenIconFlagTotalRevenues={hiddenIconFlagTotalRevenues}\r\n            />\r\n            <Pagination totalItemsCount={totalCount}\r\n                        onChange={handlePageChange}\r\n                        activePage={currentPage}\r\n                        itemsCountPerPage={pageSize}/>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\n","import {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from './store';\r\nimport {terminalsApi} from \"../api/api\";\r\n\r\nexport type terminalType = {\r\n    id: string,\r\n    title: string,\r\n    description: string\r\n}\r\n\r\nexport type removeTerminalActionType = {\r\n    type: 'TERMINALS_REDUCER/REMOVE_TERMINAL',\r\n    id: string\r\n}\r\nexport type addTerminalActionType = {\r\n    type: 'TERMINALS_REDUCER/ADD_TERMINAL',\r\n    newTerminal: terminalType\r\n}\r\nexport type getTerminalActionType = {\r\n    type: 'TERMINALS_REDUCER/GET_TERMINALS',\r\n    terminals: Array<terminalType>\r\n}\r\nconst initialState: Array<terminalType> = [];\r\n\r\ntype ActionsType = getTerminalActionType | addTerminalActionType | removeTerminalActionType\r\n\r\nexport const terminalsReducer = (state = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case 'TERMINALS_REDUCER/REMOVE_TERMINAL': {\r\n            return state.filter(c => c.id != action.id)\r\n        }\r\n        case 'TERMINALS_REDUCER/ADD_TERMINAL': {\r\n            return [...state, {\r\n                id: action.newTerminal.id,\r\n                title: action.newTerminal.title,\r\n                description: action.newTerminal.description\r\n            }]\r\n        }\r\n        case 'TERMINALS_REDUCER/GET_TERMINALS':\r\n            const terminals = action.terminals.map(t => ({...t}))\r\n            return [...terminals]\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const getTerminalAC = (terminals: Array<terminalType>): getTerminalActionType => {\r\n    return {type: 'TERMINALS_REDUCER/GET_TERMINALS', terminals}\r\n}\r\nexport const addTerminalAC = (newTerminal: terminalType): addTerminalActionType => {\r\n    return {type: 'TERMINALS_REDUCER/ADD_TERMINAL', newTerminal}\r\n}\r\nexport const removeTerminalAC = (id: string): removeTerminalActionType => {\r\n    return {type: 'TERMINALS_REDUCER/REMOVE_TERMINAL', id}\r\n}\r\n\r\nexport type ThunkDispatchType = ThunkDispatch<AppRootStateType, {}, ActionsType>\r\n\r\nexport const getTerminals = () => (dispatch: ThunkDispatchType) => {\r\n    terminalsApi.getTerminals()\r\n        .then(res => {\r\n            dispatch(getTerminalAC(res.data))\r\n        });\r\n}\r\n\r\nexport const addNewTerminal = (title: string, description: string) => (dispatch: ThunkDispatchType) => {\r\n    terminalsApi.addTerminal(title, description)\r\n        .then(res => {\r\n            const newTerminal = res;\r\n            // @ts-ignore\r\n            dispatch(addTerminalAC(newTerminal))\r\n        });\r\n}\r\nexport const removeTerminal = (id: string) => (dispatch: ThunkDispatchType) => {\r\n    terminalsApi.deleteTerminal(id)\r\n        .then(res => {\r\n            dispatch(removeTerminalAC(id))\r\n        });\r\n}\r\n","import React, {useEffect, useState} from 'react';\r\nimport '../../scss/terminals.scss';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/store\";\r\nimport {addNewTerminal, getTerminals, removeTerminal, terminalType} from \"../../redux/terminalsReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype propsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nexport const Terminals = ({isAuth}: propsType) => {\r\n\r\n    const [title, setTitle] = useState('')\r\n    const [description, setDescription] = useState('')\r\n    const terminals = useSelector<AppRootStateType, Array<terminalType>>(state => state.terminals)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (terminals) {\r\n            dispatch(getTerminals())\r\n        }\r\n    }, [])\r\n\r\n    const addTerminal = () => {\r\n        dispatch(addNewTerminal(title, description))\r\n        setTitle('')\r\n        setDescription('')\r\n    }\r\n    const remTerminal = (id: string) => {\r\n        dispatch(removeTerminal(id))\r\n    }\r\n    if (!isAuth) {\r\n        return <Redirect to='/'/>\r\n    }\r\n    return (\r\n            <div className='terminals'>\r\n\r\n                <div className='titleWrap'>\r\n                    <div className='title'> TERMINALS</div>\r\n                    <div className='setting'><input\r\n                        type=\"terminalName\"\r\n                        value={title}\r\n                        onChange={event => setTitle(event.target.value)}\r\n                        placeholder=\"Terminal name\"\r\n                        required\r\n                    />\r\n                        <input\r\n                            type=\"description\"\r\n                            value={description}\r\n                            onChange={event => setDescription(event.target.value)}\r\n                            placeholder=\"Description\"\r\n                            required\r\n                        />\r\n                        <button onClick={addTerminal}>add</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"tableWrap\" >\r\n                    <table className=\"table\" id='table'>\r\n                        <tr>\r\n                            <th>title</th>\r\n                            <th>description</th>\r\n                        </tr>\r\n                        {terminals.map(t => <tr key={t.id}>\r\n                                <td>{t.title}</td>\r\n                                <td>{t.description}</td>\r\n                                <button onClick={() => {remTerminal(t.id)}}>delete\r\n                                </button>\r\n                            </tr>\r\n                        )}\r\n                    </table>\r\n                </div>\r\n            </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport '../../scss/error.scss';\r\n\r\n\r\nexport const Error = () => {\r\n\r\n    return (\r\n        <div className=\"error\">\r\n          Error 404\r\n        </div>\r\n    );\r\n};\r\n\r\n","import {Redirect} from 'react-router-dom';\r\nimport '../../scss/login.scss';\r\nimport React, {useState} from 'react';\r\nimport axios from 'axios';\r\n\r\ntype propsType = {\r\n    onSubmit: (userInfo: any) => void\r\n    isAuth: boolean\r\n    setIsAuth: any\r\n}\r\n\r\nexport const LoginForm = (props: propsType) => {\r\n    const [userName, setUserName] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [userNameError, setUserNameError] = useState('');\r\n    const [passwordError, setPasswordError] = useState('');\r\n\r\n    const handleSubmit = (event: any) => {\r\n        setUserNameError('')\r\n        setPasswordError('')\r\n        event.preventDefault()\r\n        if(validate()) {\r\n            axios\r\n                .get(`https://api.github.com/users/${userName}`)\r\n                .then(res => {\r\n                    props.onSubmit(res.data)\r\n                    setUserName('')\r\n                    if (userName !== '') {\r\n                        props.setIsAuth(true)\r\n                    }\r\n                })\r\n                .catch(e => {\r\n                    if(e.response.status === 404) {\r\n                        let userNameError = 'User does not exist';\r\n                        setUserNameError(userNameError)\r\n                        props.onSubmit(e.message)\r\n                        props.setIsAuth(false)\r\n                    }\r\n                })\r\n        }\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to='/buyers'/>\r\n    }\r\n    const validate = () => {\r\n        const Digit = /[0-9]/.test(password)\r\n        const Upper = /[A-Z]/.test(password)\r\n\r\n        if (password.length < 8 || !( Digit && Upper)) {\r\n            let passwordError = 'Password must be more than 8 characters, at least 1 uppercase latin letter and at least 1 numeral....'\r\n            setPasswordError(passwordError)\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    return <div className='login-wrap'>\r\n        <form onSubmit={handleSubmit} className='login-form'>\r\n            <input\r\n                type=\"text\"\r\n                value={userName}\r\n                onChange={event => setUserName(event.target.value)}\r\n                placeholder=\"GitHub username\"\r\n                required\r\n            />\r\n            <span className='error_message'>{userNameError}</span>\r\n\r\n            <input\r\n                type=\"password\"\r\n                value={password}\r\n                onChange={event => setPassword(event.target.value)}\r\n                placeholder=\"Your password\"\r\n                required\r\n            />\r\n            <span className='error_message'>{passwordError}</span>\r\n\r\n            <button type=\"submit\">Sing in</button>\r\n        </form>\r\n    </div>\r\n}\r\n\r\n\r\n","// @ts-ignore\r\nimport { ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from './store';\r\nimport {buyersApi} from \"../api/api\";\r\n\r\nexport type buyerType = {\r\n    id: string,\r\n    buyerName: string,\r\n    averageCheck: number,\r\n    numberOfPurchases: number,\r\n    totalRevenues: number\r\n}\r\n\r\nexport type getBuyerAction = {\r\n    type: 'BUYER_REDUCER/GET_BUYER',\r\n    buyer: buyerType\r\n}\r\nconst initialState: Array<buyerType> = [];\r\n\r\ntype ActionsType = getBuyerAction\r\n\r\nexport const buyerReducer = (state = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case 'BUYER_REDUCER/GET_BUYER':\r\n           return action.buyer\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const getBuyerAC = (buyer: buyerType): getBuyerAction => {\r\n    return {type: 'BUYER_REDUCER/GET_BUYER', buyer}\r\n}\r\n\r\nexport type ThunkDispatchType = ThunkDispatch<AppRootStateType, {}, ActionsType>\r\n\r\nexport const getBuyer = (id: string) => (dispatch: ThunkDispatchType) => {\r\n    buyersApi.getBuyer(id)\r\n        .then(res => {\r\n            dispatch(getBuyerAC(res.data))\r\n        });\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport '../../../scss/buyer.scss';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\nimport {buyerType, getBuyer} from \"../../../redux/buyerReducer\";\r\nimport {AppRootStateType} from \"../../../redux/store\";\r\n\r\n\r\ntype propsType = {\r\n    isAuth: boolean\r\n\r\n}\r\n\r\nexport const Buyer = ({isAuth}: propsType) => {\r\n\r\n    const buyer = useSelector<AppRootStateType, buyerType>(state => state.buyer)\r\n    const dispatch = useDispatch();\r\n    let {id} = useParams()\r\n\r\n    useEffect(() => {\r\n        let a = getBuyer(id)\r\n        console.log(a)\r\n        dispatch(a)\r\n    }, [])\r\n\r\n    if (!isAuth) {\r\n        return <Redirect to='/'/>\r\n    }\r\n    return (\r\n        <div className='buyer'>\r\n            <div className='title'>BUYER ID {buyer.id}</div>\r\n            <table className='table' id='table'>\r\n                {\r\n                    <tr key={buyer.id}>\r\n                        <td>{buyer.buyerName}</td>\r\n                        <td>{buyer.averageCheck} </td>\r\n                        <td>{buyer.numberOfPurchases}</td>\r\n                        <td>{buyer.totalRevenues}</td>\r\n                    </tr>\r\n                }\r\n            </table>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\n","import React, {useState} from 'react';\r\nimport './scss/App.scss';\r\nimport {Route, Switch} from 'react-router-dom';\r\nimport {SideBar} from \"./components/SideBar\";\r\nimport {Buyers} from './components/Buyers/Buyers';\r\nimport {Terminals} from './components/Terminals/Terminals';\r\nimport {Error} from './components/Error/Error';\r\nimport {LoginForm} from './components/Login/LoginForm';\r\nimport { Buyer } from './components/Buyers/Buyer/Buyer';\r\n\r\n\r\nconst App = () => {\r\n\r\n    const [isAuth, setIsAuth] = useState(false)\r\n    const [userData, setUserData] = useState([])\r\n\r\n    const authUser = (userInfo: any) => {\r\n        setUserData(userData.concat(userInfo))\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <SideBar isAuth={isAuth} userData={userData}/>\r\n            <div className='wrapper'>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <LoginForm onSubmit={authUser} isAuth={isAuth} setIsAuth={setIsAuth}/>}/>\r\n                    <Route exact path={'/buyers'} render={() => <Buyers isAuth={isAuth}/>}/>\r\n                    <Route exact path={'/buyers/:id'} render={() => <Buyer isAuth={isAuth}/>}/>\r\n                    <Route exact path={'/terminals'} render={() => <Terminals isAuth={isAuth}/>}/>\r\n                    <Route path={'/*'} render={() => <Error/>}/>\r\n                </Switch>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {terminalsReducer} from \"./terminalsReducer\";\r\nimport {buyersReducer} from \"./buyersReducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {buyerReducer} from \"./buyerReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    buyers: buyersReducer,\r\n    buyer: buyerReducer,\r\n    terminals: terminalsReducer\r\n});\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type InferActionTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\nexport default store\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport store from './redux/store';\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}